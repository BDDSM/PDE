&НаКлиенте
Процедура МетодПолученияМетрикиПриИзменении(Элемент)
	
	Объект.ПериодичностьРасчета = Дата('00010101');
	Если Объект.МетодПолученияМетрики = ПредопределенноеЗначение("Перечисление.пэмМетодыПолученияМетрик.Push") Тогда
		Элементы.ПериодичностьРасчета.Доступность = Истина;
		Объект.ПериодичностьРасчета = Дата('00010101000030');
	Иначе
		Элементы.ПериодичностьРасчета.Доступность = Ложь;
		Объект.ПериодичностьРасчета = Дата('00010101');
	КонецЕсли;
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуАлгоритмаРасчетаНаСервере()
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Перед выполнением проверки объект необходимо записать!");
		Возврат;
	КонецЕсли; 
	
	сткВозврат = пэмМетрикиСервер.СформироватьМетрику(Объект.Алгоритм);
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе расчета.
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	           		
	сткВозврат = пэмМетрикиСервер.ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Объект.Код, Объект.ТипМетрики, сткВозврат.МетрикаТаблицей);
	
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе преобразования.
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;

	КонецЕсли; 
	
	Сообщить("Проверка алгоритма расчета завершена.
			 |Итоговая метрика:" +
			 Символы.ПС + сткВозврат.МетрикаСтрокой);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуАлгоритма(Команда)
	
	ВыполнитьПроверкуАлгоритмаРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Алгоритм = 	"
		|//В результате работы алгоритма должна получиться таблица значений с именем ""ТаблицаЗначений""
		|//Обязательным является наличие колонки ""value""
		|//В случае необходимости можно добавить дополнительные колонки, выполняющие фунции разделителей метрик
		|//Имена колонок должно состоять только из латинских символов
		|//Содержимое таблицы должно иметь тип ""Строка"", за исключение колонки ""value"" - она должна быть числом
		|
		|ТаблицаЗначений = Новый ТаблицаЗначений;
		|ТаблицаЗначений.Колонки.Добавить(""label"", Новый ОписаниеТипов(""Строка""));
		|ТаблицаЗначений.Колонки.Добавить(""value"", Новый ОписаниеТипов(""Число""));
		|
		|ГСЧ = Новый ГенераторСлучайныхЧисел();
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_1"";
		|НоваяСтрока.value = 	ГСЧ.СлучайноеЧисло(0,100);
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_2"";
		|НоваяСтрока.value = ГСЧ.СлучайноеЧисло(0,50);";
		
	КонецЕсли;
	
	ОбновитьСостояниеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеФормы()
	
	Элементы.ПериодичностьРасчета.Доступность = Объект.МетодПолученияМетрики = ПредопределенноеЗначение("Перечисление.пэмМетодыПолученияМетрик.Push");

КонецПроцедуры;